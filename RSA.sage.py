
# This file was *autogenerated* from the file RSA.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1024 = Integer(1024); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_256 = Integer(256)
def generate_key(bits):
    p=random_prime(_sage_const_2 **(bits//_sage_const_2 ),lbound=_sage_const_2 **(bits//_sage_const_2 -_sage_const_1 ))
    q=random_prime(_sage_const_2 **(bits//_sage_const_2 ),lbound=_sage_const_2 **(bits//_sage_const_2 -_sage_const_1 ))
    N=p*q
    Euler_N=(q-_sage_const_1 )*(p-_sage_const_1 )
    e=randint(_sage_const_1 ,Euler_N)
    while(gcd(e,Euler_N)!=_sage_const_1 ):
	e=randint(_sage_const_1 ,Euler_N)
    d=inverse_mod(e,Euler_N)
    return e,d,N

def encode(m):
    message=str(m)
    return sum(ord(message[i])*pow(_sage_const_256 ,i) for i in range(len(message)))

def decode(n):
    message=""
    while(n>_sage_const_0 ):
	message+=chr(n%_sage_const_256 )
	n=n//_sage_const_256 
    return message

def encrypt(m,e,N):
    return lift(mod(m,N)**e)

def decrypt(n,d,N):
    return lift(mod(n,N)**d)

e,d,N=generate_key(_sage_const_1024 ) 
encode_m=encode('RSA')  
encrypt_n=encrypt(encode_m,e,N)
decrypt_n=decrypt(encrypt_n,d,N)
decode_m=decode(decrypt_n)
#signature=encrypt(encode_m,d,N)
#Verify=decrypt(signature,e,N)
print decode_m

